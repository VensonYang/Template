$(window).load(function () {
    //设置iframe的父窗口中元素的高度
    setTimeout(function () {
        $(window.parent.document).find('.tab-pane.active').height($('body>div').outerHeight());
        parent.$(window.parent.document).trigger('resizeHeight');
    }, 0)
     
    $(window).resize(function () {
        $(window.parent.document).find('.tab-pane.active').height($('body>div').outerHeight());
        parent.$(window.parent.document).trigger('resizeHeight');
    });
    // 点击iframe中的内容时，触发父窗口的点击事件
    $(document).on('click', function () {
        parent.$(window.parent.document).trigger('click');
    });
})

$(function () {
	//初始化select插件
	$('.form-inline select,.form-horizontal select').select2({
	    placeholder: '',
	    allowClear: true,
	    minimumResultsForSearch: Infinity
	});
    //表单清空按钮的清空功能
    $('.clear-js').click(function () {
        $('.panel-body .form-inline')[0].reset();
        if ($('.panel-body .form-inline select').length > 0) {
            $('.panel-body .form-inline select').select2('val', '');
        }
    });
    //全选按钮的全选功能
    $('.check-all-js').click(function () {
    	  //全选按钮的全选功能
        if ($(this)[0].checked) {
            $('.table').bootstrapTable('checkInvert');
        } else {
           $('.table').bootstrapTable('uncheckAll');
        }
    });
    if ($('.start-time').length > 0 && $('.end-time').length > 0) {

        (function () {
            jeDate.skin('green');
            var start = {
                dateCell: '.start-time',
                format: 'YYYY-MM-DD',
                festival: false,
                maxDate: '2099-06-16 23:59:59', //最大日期
                isTime: false,
                choosefun: function (datas) {
                    end.minDate = datas; //开始日选好后，重置结束日的最小日期
                },
                clearfun: function () {
                    end.minDate = '1900-01-01 00:00:00';
                }
            };
            var end = {
                dateCell: '.end-time',
                format: 'YYYY-MM-DD',
                festival: false,
                maxDate: '2099-06-16 23:59:59', //最大日期
                isTime: false,
                choosefun: function (datas) {
                    start.maxDate = datas; //将结束日的初始值设定为开始日的最大日期
                },
                clearfun: function () {
                    start.maxDate = "2099-06-16 23:59:59";
                }
            };
            jeDate(start);
            jeDate(end);
        }());
    }
    if ($('.occur-time').length > 0) {
        jeDate.skin('green');
        jeDate({
            dateCell: ".occur-time",
            format: "YYYY-MM-DD hh:mm:ss",
            isTime: true,
            festival: false
        });
    }
    if ($('.input-time').length > 0) {
        jeDate.skin('green');
        jeDate({
            dateCell: ".input-time",
            format: "YYYY-MM-DD",
            isTime: false,
            festival: false
        });
    }
    if ($('.modify-time').length > 0) {
        jeDate.skin('green');
        jeDate({
            dateCell: ".modify-time",
            format: "YYYY-MM-DD",
            isTime: false,
            festival: false
        });
    }
    if($('.time').length > 0) {
        jeDate.skin('green');
        jeDate({
            dateCell: ".time",
            format: "YYYY-MM-DD",
            isTime: false,
            festival: false
        });
    }
    if ($('.entry-time').length > 0) {
        (function () {
            var pl = new Placeholder('.entry-time');
            if (!pl.isPlaceholer()) {
                pl.init();
            }
        }());
    }
    if ($('.birth-date').length > 0) {
        (function () {
            var pl1 = new Placeholder('.birth-date');
            if (!pl1.isPlaceholer()) {
                pl1.init();
            }
        }());
    }
    //获取选中行
    $('.table').on('click-row.bs.table', function (e, row, $element) {
        $('.selecttr',$('.table')).removeClass('selecttr');
        $($element).addClass('selecttr');
    });
});
/**
 * dialog.js
 * */
$(function () {
    function CustomDialog(option) {
        this.option = $.extend(CustomDialog.DEFAULTS, option);
        this.messageType = {
                prompt: 'prompt-message',
                warning: 'warning-message',
                error: 'error-message',
                alert:'alert-message'
        };
        this.handlers = {};
        this.init();
    }
    CustomDialog.DEFAULTS = {
        width: '381', //弹窗宽度
        type: 'confirm', //弹窗类型
        text: '',//弹窗内容文字
        title: '系统信息',//弹窗标题
        closeBtn: true,//是否添加关闭按钮
        messageType: 'prompt',//消息类型（三种：警告，提示，错误）不同设置对应不同图片
        mask: false,      //是否显示遮罩层
        onAlertBtnClick:'',//alert弹窗确定按钮的回调
        onConfirmBtnClick:'',//confirm弹出框确定按钮的回调
        onCancelBtnClick:'',//confirm 弹窗取消按钮的回调
        onCloseBtnClick:''//关闭弹窗按钮的回调
    }
    CustomDialog.prototype = {
        init: function () {
            this.initMask();
            this.initContainer();
            this.initHead();
            this.initBody();
            this.initFooter();
            this.$container.appendTo($('body'));
        },
        initContainer: function () {
            this.$container = $([
                '<div class="dialog-container">',
                '<div class="dialog">',
                '<div class="dialog-content">',
                '<div class="dialog-header">',
                '</div>',
                '<div class="dialog-body"></div>',
                '<div class="dialog-footer"></div>',
                '</div></div></div>'
            ].join(''));
            this.$dialogHeader = this.$container.find('.dialog-header');
            this.$dialogBody = this.$container.find('.dialog-body');
            this.$dialogFooter = this.$container.find('.dialog-footer');

        },
        initHead: function () {
            var that = this;
            var html = [this.option.closeBtn === true ? '<button type="button" class="close"><span aria-hidden="true">&times;</span></button>' : '',
                '<h5 class="dialog-title">',
                this.option.title,
                '</h5>'
            ].join('');
            this.$dialogHeader.append(html);
            if (this.option.closeBtn) {
                this.$close = this.$dialogHeader.find('button');
                this.$close.on('click.dialog', function () {
                    $(this).off('dialog');
                    that.hide();
                    that.trigger('close.dialog');
                    that.option.onCloseBtnClick&&that.option.onCloseBtnClick();
                })
            }
        },
        initBody: function () {
            var html = [
                '<div class="message ',
                this.messageType[this.option.messageType],
                '"><p>',
                this.option.text,
                '</p>',
                this.option.type == 'alert' ? '' : '<span>如果是请点击“确定”，否则点“取消”</span>'
            ].join('');
            this.$dialogBody.append(html);

        },
        initFooter: function () {
            var that = this;
            var html = [
                this.option.type == 'alert' ? '<span class="btn btn-green mr170" id="alert-btn">确&#12288;定</span>' :
                '<span class="btn btn-green" id="confirm-define">确&#12288;定</span><span class="btn btn-gray mr90" id="confirm-cancel">取&#12288;消</span>'
            ].join('');
            this.$dialogFooter.append(html);
            this.$alertBtn = this.$dialogFooter.find('#alert-btn');
            if (this.option.type == 'alert') {
                this.$alertBtn.on('click.dialog', function () {
                    $(this).off('dialog');
                    that.hide();
                    that.trigger('define.dialog');
                    that.option.onAlertBtnClick&&that.option.onAlertBtnClick();
                })

            }
            if (this.option.type == 'confirm') {
                this.$confirmDefine = this.$dialogFooter.find('#confirm-define');
                this.$confirmCancel = this.$dialogFooter.find('#confirm-cancel');
                this.$confirmDefine.on('click.dialog', function () {
                    $(this).off('dialog');
                    that.hide();
                    that.trigger('define.dialog');
                    that.option.onConfirmBtnClick&&that.option.onConfirmBtnClick();
                });
                this.$confirmCancel.on('click.dialog', function () {
                    $(this).off('dialog');
                    that.hide();
                    that.trigger('cancel.dialog');
                    that.option.onCancelBtnClick&&that.option.onCancelBtnClick();
                })
            }
        },
        initMask: function () {
            if (this.option.mask) {
                this.$mask = $('<div class="dialog-mask"></div>');
                $('body').append(this.$mask);
            }
        },
        hide: function () {
            this.$container.remove();
            if (this.option.mask) {
                this.$mask.remove();
            }


        },
        on: function (type, handler) {
            if (typeof this.handlers[type] == 'undefined') {
                this.handlers[type] = [];
            }
            this.handlers[type].push(handler);
        },
        trigger: function (type, data) {
            if (this.handlers[type] instanceof Array) {
                var handlers = this.handlers[type];
                for (var i = 0, len = handlers.length; i < len; i++) {
                    handlers[i](data);
                }
            }
        }
    };
    window.CustomDialog= CustomDialog;
});



/*
 * venson common.js
 * 
 * */
var Comm={};
var baseUrl=window.location.protocol+"//"+window.location.host+"/dyxtDI/";
//前台跳转前缀
var baseUIUrl=window.location.protocol+"//"+window.location.host+"/dyxtUI/";

function getUrlParam(name) {
	var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)"); // 构造一个含有目标参数的正则表达式对象
	var r = window.location.search.substr(1).match(reg); // 匹配目标参数
	if (r)
		return unescape(r[2]);
	else
		return null; // 返回参数值
}
var priviledgesID=getUrlParam("id");

goTo=function(url){
	location.href=url+"?id="+priviledgesID;
}
//当表格大小变化时，设置iframe的大小
$('.table').on('reset-view.bs.table', function () {
	 $(window.parent.document).find('.tab-pane.active').height($('body>div').outerHeight());
     parent.$(window.parent.document).trigger('resizeHeight');
     //光标定义到第一行
     $(".fixed-table-body .table tbody tr").first().addClass('selecttr');
});

Comm.confirm=function(text,handle,messageType){
	var option = {};
    option.type = "confirm";
    option. onConfirmBtnClick=handle;
    option.messageType = (!messageType)?"warning":messageType;
    option.text = text;
    var dialog = new CustomDialog(option);
    return dialog;
}
Comm.alert=function(text,messageType){
	var option = {};
    option.type = "alert";
    option.messageType = (!messageType)?"warning":messageType;
    option.text = text;
    var dialog = new CustomDialog(option);
}

Comm.deleteObject=function(url,table){
	var $table=$(table);
	var row=$table.bootstrapTable('getSelections');
	if(row.length<=0)
		this.alert("请选择要删除的对象！");
	else{
		this.confirm('是否要删除选择的'+row.length+'个对象',function(){
				$.each(row,function(i,e){
					Comm.deleteAjax(url,$table,e.id);
				});
			}
		)
	}
}

Comm.modifyObject=function(url,table){
	var objId=Comm.getSelectedRow($(table));
	 if(objId)
		 location.href=url+"?objId="+objId.id+"&id="+priviledgesID;
	 else
		this.alert("请点击要修改的行");
	 
	
}

Comm.getSelectedRow=function($table) {
  var index = $table.find('tr.selecttr').data('index');
  return $table.bootstrapTable('getData')[index];
}

/**
 * 封装删除ajax函数
 * <br>param: url 接口地址
 * <br>param: table bootstrap表格
 * <br>param: ids 删除的id
 * */
Comm.deleteAjax=function(url,table,ids){
		$.ajax({
		   type: "POST",
		   url: baseUrl+url,
		   data:{id:ids,"priviledgesID":priviledgesID},
		   dataType:"json",
		   success: function(response){
			  if(response.status==0)
				  table.bootstrapTable('remove', {field: 'id',values: [ids]});
			  else
				  alert("错误提示："+response.message);
			  
		   },error:function(response){
			   	 alert("连接服务器出错，请检查！");
		   }
		});
	}
/**
 * 伪多态保存函数
 * 
 * */
Comm.saveAjax=function(url,param,handle){
	if(typeof(arguments[0])=="object"){
		Comm.saveDataByObject(arguments[0]);
	}else{
		var l=arguments.length;
		var option={};
		if(l==2){
			option.url=arguments[0];
			option.params=arguments[1];
			Comm.saveDataByObject(option);
		}else if(l==3){
			option.url=arguments[0];
			option.params=arguments[1];
			option.handle=arguments[2];
			Comm.saveDataByObject(option)
		}
		
	}
}
/**
 * 快速保存表单数据
 * <br>param:url 接口地址
 * <br>param:handle 结果处理
 * 
 * */
Comm.fastSaveAjax=function(url,handle){
	handle=(handle)?handle:"back";
	if(!Comm.checkError()){
		Comm.saveAjax(url,Comm.getParameters(),handle);
	}
}
/**
 * 快速修改表单数据
 * <br>param:url 接口地址
 * <br>param:objId 修改对象Id
 * <br>param:handle 结果处理
 * 
 * */
Comm.fastModifyAjax=function(url,objId,handle){
	handle=(handle)?handle:"back";
	if(!Comm.checkError()){
		var params=Comm.getParameters();
		params.id=objId;
		Comm.saveAjax(url,params,handle);
	}
}
/**
 * 封装保存ajax函数
 * <br>param: option 参数格式{"url":"","async":false,"tip","#tag","params":{},"handle",""} 
 * */
Comm.saveDataByObject=function(option){
	option.async=(!option.async)?option.async:true;
	option.type=(!option.type)?"POST":option.type;
	option.tip=(!option.tip)?'#saveId':option.tip;
	if(typeof(option.params)=="object"){
		option.params.priviledgesID=priviledgesID;
	}
	$.ajax({
		   type: option.type,		
		   url: baseUrl+option.url,
		   data:option.params,
		   async:option.async,
		   dataType:"json",
		   success: function(response){
			  if(response.status==0){
				  if(option.handle){
					  if(option.handle=="current"){
						  location.href=location.href;
					  }
					  else if(option.handle=="back"){
						  location.href=document.referrer;
					  }
					  else if(option.handle=="returnValue"){
						  window.primaryKey=response.rows;
					  }else if(option.handle=="refresh"){
						 $('.table').bootstrapTable('refresh');
					  }
				  }
			  }else{
				  if(response.message)
					  $(option.tip).tips({msg : response.message});
				  else
					  $(option.tip).tips({msg : "保存失败，请联系管理员！"});
			  }
		   },error:function(){
			   $(option.tip).tips({msg : "网络出错，请检查网络！"});
		   }
		});
}
/*根据页面定义的样式自动校验参数*/
Comm.checkError=function(){
	var hasError=false;
	$("form :input").not(":button").each(function(i,e){
		var $label=$(this).parent("div").prev("label");
		if($label.children("span").hasClass("c-red")){
			if($.trim(e.value).length==0){
				if(e.lang){
					$(this).tips({msg : e.lang+"不能为空！"});
				}else{
					var text=$.trim($label.text());
					if(text.length>0){
						text=text.substring(1,text.length-1);
						$(this).tips({msg : text+"不能为空！"});
					}else{
						$(this).tips({msg : "该值不能为空！"});
					}
					
				}
				hasError= true;
			}
		}
	})
	return hasError;
}
/*根据页面存在的表单自动获取参数*/
Comm.getParameters=function(){
	var params={};
	$("form :input").not(":button").each(function(i,e){
		params[e.id]=e.value
	})
	return params;
}
/**
 * ajax设置下拉框
 * <br>param: url 接口地址
 * <br>param: tag 目标标签
 * */
Comm.setSelect=function(url,tag){
	$.ajax({
		   type: "POST",
		   url: baseUrl+url,
		   data:{"priviledgesID":priviledgesID},
		   async: false,
		   dataType:"json",
		   success: function(data){
			   if(data.status==0){
				   $(tag).select2({
					   placeholder: '',
				       allowClear: true,
				       minimumResultsForSearch: Infinity,
					   data: data.rows
					 });
			   }else
				   alert(data.message);
		   }
			
	});
}
/**
 * ajax设置编辑数据
 * <br>param: url 接口地址
 * <br>param: objId 对象Id
 * <br>param: filter 过滤的参数
 * */
Comm.setData=function(url,objId,filter){
	$.ajax({ 
		type: "POST",
		url: baseUrl+url,
		data:{"id":objId,"priviledgesID":priviledgesID}, 
		dataType:"json",
		async: false, 
   		success: function(response){
   			var data=response.rows;
   			if(filter){
	   			$("form :input").not(":button").each(function(i,e){
	   					var $this=$(this);
	   					$.each(filter,function(index,name){
	   						if(e.id!=name){
	   							if($this.is("input[type='text']")){
	   								$this.val(data[e.id]);
	   		   	   				}else if($this.is("select")){
	   		   	   					$this.val(data[e.id]).trigger('change');
	   		   	   				}
	   						}
	   					})
	   			})
   			}else{
   				$("form :input").not(":button").each(function(i,e){
						if($(this).is("input[type='text']")){
	   	   					$(this).val(data[e.id])
	   	   				}else if($(this).is("select")){
	   	   					$(this).val(data[e.id]).trigger('change');
	   	   				}
   				})
			}
	}});
	
}
/**
 * ajax设置checkbox
 * <br>param: url 接口地址
 * <br>param: objId 对象Id
 * <br>param: tag 设置目标
 * */
Comm.setCheckbox=function(url,objId,tag){
	 $.ajax({ 
		 type: "POST",
		 url: baseUrl+url,
		 data:{"priviledgesID":priviledgesID,"id":objId},
		 async: false,
		 dataType:"json",
 		 success: function(data){
 			var priviledges=data.rows;
 			var inputs=$(tag);
 			if(data.status==0){
 				$.each(priviledges,function(i,v){
 					$.each(inputs,function(i1,v1){
 						if(v.id==$(this).val()){
 							this.checked=true;
 						}
 						
 					});
 				});
 			}
 			
		}});
}
/**
 * 获取已勾选的checkbox参数
 * <br>param: tag 获取目标
 * <br>param: paramName 参数名
 * */
Comm.getCheckedData=function(tag,paramName){
	var ids=[];
	ids.push("priviledgesID=");
	ids.push(priviledgesID);
	$($(tag)).each(function(i,v){
		ids.push("&"+paramName+"=");
		ids.push($(this).val());
	})
	if(ids.length>2){
		return ids.join('');
	}else{
		return null;
	}
	
}
/**
 * 设置权限菜单
 * */
Comm.setPriviledgeMenu=function(){
	$.ajax({ 
		type: "POST",
		url: baseUrl+"priviledges/getMenu",
		data:{"priviledgesID":priviledgesID}, 
		async: false,
		dataType:"json",
		success: function(data){
			$.each(data.rows.childNode,function(i,v){
				$("#content").append(getMenu(v));
			});
	}});
    function getMenu(menu){
		var menu_li='';
		if(menu.childNode.length>0){
					menu_li+='<div class="checkbox-group"><div class="checkbox-title">';
					menu_li+='<label><input name="priviledgesID" value='+menu.id+' type="checkbox"> <span>'+menu.name+' </span></label></div>';
					menu_li+='<div class="checkbox-content">';
					$.each(menu.childNode,function(i,v){
							menu_li+=getMenu(v);
						})
					menu_li+="</div></div>"
			}else{
					menu_li+='<label><input name="priviledgesID" value='+menu.id+' type="checkbox"> <span>'+menu.name+' </span></label>';
				}
		return menu_li;
	};
}
/**
 * 设置教师任教班级
 * */
Comm.setTeacherClassMenu=function(){
	$.ajax({
		   type: "POST",
		   url: baseUrl+"tClass/getShool",
		   data:{"priviledgesID":priviledgesID},
		   async: false,
		   dataType:"json",
		   success: function(data){
			   $('#content tr').eq(0).find('td').eq(0).attr('rowspan',data.rows.grades.length+1);
			   var html=[];
			   $.each(data.rows.grades,function(i,e){
				   html.push('<tr><td><input type="checkbox" name="grade" value="'+e.name+'"><span>'+e.name+'</span></td><td><div class="checkbox-row">');
				   $.each(e.classes,function(i1,o){
					   html.push('<label><input type="checkbox" name="classname" value="'+o.id+'"><span>'+o.text+'</span></label>');
				   });
				   html.push('</div></td></tr>')
			   })
			  $("#content").append(html.join(''));
			  $.each($("#content input[name='grade']"),function(i,e){
				  $(this).click(function(){
					  if(this.checked){
						  $.each($(this).parent().next().find('input[type="checkbox"]'),function(i1,o){
							  this.checked=true;
						  })
					  }else{
						  $.each($(this).parent().next().find('input[type="checkbox"]'),function(i1,o){
							  this.checked=false;
						  })
					  }
					  
				  })
			  });
			  $("input[name='all']").click(function(){
				  if(this.checked){
					  $.each($(this).parent().parent().parent().find('input[type="checkbox"]'),function(i1,o){
						  this.checked=true;
					  })
				  }else{
					  $.each($(this).parent().parent().parent().find('input[type="checkbox"]'),function(i1,o){
						  this.checked=false;
					  })
				  }
				  
			  })
		   }
	});
}
/**
 * 下载excel模板
 * <br>param: templateName 模板名称
 * <br>param: downloadName 下载文件名称
 * */
Comm.downloadTemplate=function(templateName,downloadName){
	window.location.href=baseUrl+"attachment/excelDownload?fileName=/template/"+templateName+"&downName="+downloadName;
}
/**
 * 下载excel模板
 * <br>param: templateName 模板名称
 * <br>param: downloadName 下载文件名称
 * */
var excelQueryParam={};
Comm.exportExcel=function(url,templateName){
//	var param=[];
//	$.each(excelQueryParam,function(key,value){
//		if(value){
//			param.push('&'+key+'='+value);
//		}
//	})
	var data=$('.table').bootstrapTable('getData');
	this.post(baseUrl+url, {"json":JSON.stringify(data),"template":templateName,"priviledgesID":priviledgesID})
}

Comm.post=function(URL, PARAMS){
	    var temp = document.createElement("form");        
	    temp.action = URL;        
	    temp.method = "post";        
	    temp.style.display = "none";        
	    for (var x in PARAMS) {        
	        var opt = document.createElement("textarea");        
	        opt.name = x;        
	        opt.value = PARAMS[x];        
	        // alert(opt.name)        
	        temp.appendChild(opt);        
	    }        
	    document.body.appendChild(temp);        
	    temp.submit(); 
	    temp.parentNode.removeChild(temp);
}

/**
 * 自动获取查询参数并发送查询请求
 * */
var queryParam={};
queryParam.priviledgesID=priviledgesID;
Comm.queryData=function(){
	queryParam={};
	queryParam.priviledgesID=priviledgesID;
	 $("form :input").not(":button").each(function(i,e){
		 if($.trim($(this).val())){
			 queryParam[e.id]=$(this).val();
		 }
    });
	$(".table").bootstrapTable('refresh', {
		query: queryParam
	});
}

Comm.bootstrapTableQuery=function(params){
	$.each(queryParam,function(i,e){
		params[i]=e;
	})
	excelQueryParam=params;
	return params;
}